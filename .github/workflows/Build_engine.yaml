name: Compile Flutter Engine - Android ARM64 Host (All Modes)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android-arm64-host:
    name: Build Android ARM64 Host Engine
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build_mode: [ debug, profile, release ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          repository: flutter/flutter
          path: flutter
          fetch-depth: 1
          lfs: true

      - name: Verify Git HEAD
        run: |
          cd flutter
          git rev-parse HEAD

      - name: Get Flutter Dependencies
        run: |
          cd flutter
          ./bin/flutter doctor -v

      - name: Configure Flutter Engine Build (${{ matrix.build_mode }})
        run: |
          cd flutter/engine
          echo "Current directory after cd flutter/engine: $(pwd)"
          ./flutter/tools/gn --host-os=linux --host-cpu=arm64 --target-os=android --target-cpu=arm64 --runtime-mode=${{ matrix.build_mode }} ${{ matrix.build_mode == 'release' && '--optimized' || '--unoptimized' }}
          echo "GN configuration complete."

      - name: Create Output Directories (${{ matrix.build_mode }})
        run: |
          cd flutter/engine/out/linux_arm64
          echo "Current directory: $(pwd)"
          mkdir -p ${{ matrix.build_mode }}_unopt
          if [[ "${{ matrix.build_mode }}" == "release" ]]; then
            mkdir -p ${{ matrix.build_mode }}
          fi
          echo "Output directories created."
          ls -l

      - name: Build Flutter Engine (${{ matrix.build_mode }})
        run: |
          cd flutter/engine
          echo "Current directory before ninja: $(pwd)"
          ninja -C out/linux_arm64/${{ matrix.build_mode }}_unopt flutter_patched_sdk # Unoptimized build for debug and profile
          if [[ "${{ matrix.build_mode }}" == "release" ]]; then
            ninja -C out/linux_arm64/${{ matrix.build_mode }} flutter_patched_sdk # Optimized build for release
          fi
          echo "Ninja build complete."
          echo "Contents of out/linux_arm64/${{ matrix.build_mode }}${{ matrix.build_mode != 'release' && '_unopt' || '' }}:"
          ls -l out/linux_arm64/${{ matrix.build_mode }}${{ matrix.build_mode != 'release' && '_unopt' || '' }}

      - name: Print Artifact Path (${{ matrix.build_mode }})
        run: |
          echo "Expected artifact path for ${{ matrix.build_mode }}: ${{ github.workspace }}/flutter/engine/out/linux_arm64/${{ matrix.build_mode }}${{ matrix.build_mode != 'release' && '_unopt' || '' }}/flutter_patched_sdk"

      # - name: Create Archive (${{ matrix.build_mode }})
      #   run: |
      #     cd ${{ github.workspace }}/flutter/engine/out/linux_arm64
      #     if [[ "${{ matrix.build_mode }}" == "debug" ]]; then
      #       zip -r android-arm64-host-engine-debug.zip debug_unopt
      #     elif [[ "${{ matrix.build_mode }}" == "profile" ]]; then
      #       zip -r android-arm64-host-engine-profile.zip profile_unopt
      #     else
      #       zip -r android-arm64-host-engine-release.zip release
      #     fi

      # - name: Upload Archive Artifact (${{ matrix.build_mode }})
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: android-arm64-host-engine-${{ matrix.build_mode }}
      #     path: ${{ github.workspace }}/flutter/engine/out/linux_arm64/android-arm64-host-engine-${{ matrix.build_mode }}.zip
      #     if-no-files-found: error
